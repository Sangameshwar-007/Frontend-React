{"ast":null,"code":"var _jsxFileName = \"D:\\\\SANGAMESHWAR\\\\Frontend\\\\assignment\\\\src\\\\context\\\\CompanyContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { fetchCompanies, fetchIndustries } from \"../api/companiesAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CompanyContext = /*#__PURE__*/createContext();\nexport const CompanyProvider = ({\n  children\n}) => {\n  _s();\n  const [companies, setCompanies] = useState([]);\n  const [industries, setIndustries] = useState([]);\n  const [filteredCompanies, setFilteredCompanies] = useState([]);\n  const [filters, setFilters] = useState({\n    search: \"\",\n    location: \"All\",\n    industry: \"All\"\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  /** Load all data on mount */\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setLoading(true);\n        const [companyData, industryData] = await Promise.all([fetchCompanies(), fetchIndustries()]);\n        setCompanies(companyData);\n        setFilteredCompanies(companyData);\n        setIndustries(industryData);\n        setError(null);\n      } catch (err) {\n        console.error(\"Error loading data:\", err);\n        setError(\"Failed to load data. Please try again later.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadData();\n  }, []);\n\n  /** Filter logic */\n  useEffect(() => {\n    let filtered = companies;\n    if (filters.search.trim()) {\n      filtered = filtered.filter(c => c.name.toLowerCase().includes(filters.search.toLowerCase()));\n    }\n    if (filters.industry !== \"All\") {\n      filtered = filtered.filter(c => c.industry === filters.industry);\n    }\n    if (filters.location !== \"All\") {\n      filtered = filtered.filter(c => c.location === filters.location);\n    }\n    setFilteredCompanies(filtered);\n  }, [filters, companies]);\n  return /*#__PURE__*/_jsxDEV(CompanyContext.Provider, {\n    value: {\n      companies,\n      industries,\n      filteredCompanies,\n      filters,\n      setFilters,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(CompanyProvider, \"m+uPzKoDi+V0MMS53/HbWMQhs5k=\");\n_c = CompanyProvider;\nvar _c;\n$RefreshReg$(_c, \"CompanyProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","fetchCompanies","fetchIndustries","jsxDEV","_jsxDEV","CompanyContext","CompanyProvider","children","_s","companies","setCompanies","industries","setIndustries","filteredCompanies","setFilteredCompanies","filters","setFilters","search","location","industry","loading","setLoading","error","setError","loadData","companyData","industryData","Promise","all","err","console","filtered","trim","filter","c","name","toLowerCase","includes","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/SANGAMESHWAR/Frontend/assignment/src/context/CompanyContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\nimport { fetchCompanies, fetchIndustries } from \"../api/companiesAPI\";\r\n\r\nexport const CompanyContext = createContext();\r\n\r\nexport const CompanyProvider = ({ children }) => {\r\n    const [companies, setCompanies] = useState([]);\r\n    const [industries, setIndustries] = useState([]);\r\n    const [filteredCompanies, setFilteredCompanies] = useState([]);\r\n    const [filters, setFilters] = useState({\r\n        search: \"\",\r\n        location: \"All\",\r\n        industry: \"All\",\r\n    });\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    /** Load all data on mount */\r\n    useEffect(() => {\r\n        const loadData = async () => {\r\n            try {\r\n                setLoading(true);\r\n                const [companyData, industryData] = await Promise.all([\r\n                    fetchCompanies(),\r\n                    fetchIndustries(),\r\n                ]);\r\n\r\n                setCompanies(companyData);\r\n                setFilteredCompanies(companyData);\r\n                setIndustries(industryData);\r\n                setError(null);\r\n            } catch (err) {\r\n                console.error(\"Error loading data:\", err);\r\n                setError(\"Failed to load data. Please try again later.\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        loadData();\r\n    }, []);\r\n\r\n    /** Filter logic */\r\n    useEffect(() => {\r\n        let filtered = companies;\r\n\r\n        if (filters.search.trim()) {\r\n            filtered = filtered.filter((c) =>\r\n                c.name.toLowerCase().includes(filters.search.toLowerCase())\r\n            );\r\n        }\r\n\r\n        if (filters.industry !== \"All\") {\r\n            filtered = filtered.filter((c) => c.industry === filters.industry);\r\n        }\r\n\r\n        if (filters.location !== \"All\") {\r\n            filtered = filtered.filter((c) => c.location === filters.location);\r\n        }\r\n\r\n        setFilteredCompanies(filtered);\r\n    }, [filters, companies]);\r\n\r\n    return (\r\n        <CompanyContext.Provider\r\n            value={{\r\n                companies,\r\n                industries,\r\n                filteredCompanies,\r\n                filters,\r\n                setFilters,\r\n                loading,\r\n                error,\r\n            }}\r\n        >\r\n            {children}\r\n        </CompanyContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}